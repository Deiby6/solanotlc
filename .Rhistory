library(solanotlc)
?tlc
Sys.which("pdflatex")
Sys.getenv("PATH")
Sys.which(“pdflatex”)
Sys.which(“tools”)
library(tools)
usethis::use_mit_license("deiby solano")
Sys.getenv("PATH")
Sys.setenv(PATH=paste(Sys.getenv("PATH"),"C:/Program Files/MiKTeX 2.9/miktex/bin/x64/",sep=";"))
library(testthat)
x <- 3
expect_true(x > 1) # pasa sin errores
expect_true(x > 5)
expect_is(x, "numeric")
x="w"
x <- 3
x1="w"
expect_is(x1, "numeric")
usethis::use_testthat()
library(fs) # paquete para interactuar con el sistema de archivos
library(here) # cuando trabajamos en un proyecto nos permite ubicar el directorio de trabajo.
install.packages("here")
library(here) # cuando trabajamos en un proyecto nos permite ubicar el directorio de trabajo.
# etiquetemos un conjunto de pruebas
context("Validación de los datos de entrada")
test_that(desc = "El tamaño de muestra seleccionada no puede ser mayor a la población",
code = {expect_true(length(var1) >= n)
})
# creamos una prueba
source("tlc.R")
# creamos una prueba
source("hello.R")
# creamos una prueba
source("R/hello.R")
test_that(desc = "El tamaño de muestra seleccionada no puede ser mayor a la población",
code = {expect_true(length(var1) >= n)
})
# etiquetemos un conjunto de pruebas
context("Validación de los datos de entrada")
test_check("solanotlc")
library(testthat)
library(solanotlc)
# etiquetemos un conjunto de pruebas
context("Validación de los datos de entrada")
test_check("solanotlc")
test_that(desc = "El tamaño de muestra seleccionada no puede ser mayor a la población",
code = {expect_true(length(var1) >= n)
})
source("R/hello.R")
test_that(desc = "El tamaño de muestra seleccionada no puede ser mayor a la población",
code = {expect_true(length(var1) >= n)
})
test_that("El tamaño de muestra seleccionada no puede ser mayor a la población",{
expect_true(length(var1) >= n)
})
library(testthat)
library(solanotlc)
# etiquetemos un conjunto de pruebas
context("Validación de los datos de entrada")
test_that("El tamaño de muestra seleccionada no puede ser mayor a la población",{
expect_true(length(var1) >= n)
})
test_check("solanotlc")
test_that("El tamaño de muestra seleccionada no puede ser mayor a la población",{
tlc expect_true(length(var1) >= n)
})
test_that("El tamaño de muestra seleccionada no puede ser mayor a la población",{
tlc, expect_true(length(var1) >= n)
})
test_that("El tamaño de muestra seleccionada no puede ser mayor a la población",{
tlc(expect_true(length(var1) >= n)
})
library(solanotlc)
library(solanotlc)
?tlc
library(solanotlc)
library(testthat)
library(solanotlc)
library(solanotlc)
?tlc()
variable1=rnorm(1000,50,10);tlc(variable1,c(32,200),20,2)
test_file(path="./test/n_mayor_0.R")
library(testthat)
test_file(path="./test/n_mayor_0.R")
context("Validación de los datos de entrada")
test_that("El tamaño de muestra seleccionada no puede ser mayor a la población",{
expect_true($counts >= 0 )
})
test_check("solanotlc")
context("Validación de los datos de entrada")
test_that("El tamaño de muestra seleccionada no puede ser mayor a la población",{
expect_true(tlc$counts >= 0 )
})
test_check("solanotlc")
test_check("solanotlc")
context("Validación de los datos de entrada")
expect_true(tlc$counts >= 0 )
context("Validación de los datos de entrada")
expect_true(tlc$raz >= 0 )
context("Validación de los datos de entrada")
expect_true(raz >= 0 )
path <- testthat_example("tlc")
library(testthat)
path <- testthat_example("tlc")
expect_true(tlc($counts) >= 0 )
expect_true(tlc("counts") >= 0 )
mean()
mean(b)
mean(1)
mean()
mean
context("Validación de los datos de entrada")
expect_true(tlc() >= 0 )
tlc()
tlc(
-
tlc
expect_true(tlc()$var1>= 0 )
library(fs)
library(here)
context("Debe haber al menos las dos funciones creadas para el paquete")
# creamos una prueba
test_that(desc = "Debe haber al menos las dos funciones creadas para el paquete",
code = {
# lista los archivos .csv
files <- dir_ls(path = here("man"), glob = "*.Rd")
expect_true(length(files) >= 2)
})
test_file(path="./test/n_mayor_0.R")
dir_ls(path = here(""), glob = "*.Rd")
dir_ls(path = here("./test/n_mayor_0.R"), glob = "*.Rd")
dir_ls(path = here("tests/n_mayor_0.R"), glob = "*.Rd")
dir_ls(path = here("./tests/n_mayor_0.R"), glob = "*.Rd")
dir_ls(path = here("./tests"), glob = "*.Rd")
dir_ls(path = here("./man"), glob = "*.Rd")
expect_true(length(files) >= 2)
files=dir_ls(path = here("./man"), glob = "*.Rd")
expect_true(length(files) >= 2)
test_file(path="./test/n_mayor_0.R")
test_file(path="./tests/n_mayor_0.R")
context("Debe haber al menos las dos funciones creadas para el paquete")
# lista los archivos .csv
files <- dir_ls(path = here("./man"), glob = "*.Rd")
expect_true(length(files) >= 2)
test_file(path="./tests/n_mayor_0.R")
context("Debe estar el archivo de la licencia del paquete")
files <- dir_ls(path = here(""), glob = "*.md")
expect_true(length(files) = 1)
context("Debe estar el archivo de la licencia del paquete")
files <- dir_ls(path = here(""), glob = "*.md")
expect_true(length(files) == 1)
test_file(path="./tests/archivo_licencia.R")
test_file(path="./tests/n_mayor_0.R")
test_file(path="./tests/archivo_licencia.R")
setwd("C:/Users/Deiby S/Desktop/Programacion avanzada R/Clase 3/solanotlc/tests")
test_file(path="./tests/pruebas_funcion.R")
test_file(path="./tests/pruebas_funcion.R")
context("Debe estar el archivo de la licencia del paquete")
files <- dir_ls(path = here(""), glob = "*.md")
expect_true(length(files) == 1)
context("Debe haber al menos las dos funciones creadas para el paquete")
files <- dir_ls(path = here("./man"), glob = "*.Rd")
expect_true(length(files) >= 2)
test_file(path="./tests/pruebas_funcion.R")
library(testthat)
test_file(path="./tests/pruebas_funcion.R")
library(here)
files <- dir_ls(path = here("./tests/pruebas_funcion.R"))
test_file(path="./tests/pruebas_funcion.R")
test_file(path="./tests/archivo_pruebas.R")
context("Debe estar el archivo de la licencia del paquete")
files <- dir_ls(path = here(""), glob = "*.md")
expect_true(length(files) == 1)
context("Debe haber al menos las dos funciones creadas para el paquete")
files <- dir_ls(path = here("./man"), glob = "*.Rd")
expect_true(length(files) >= 2)
test_file(path="./tests/archivo_pruebas.R")
test_file(path="tests/archivo_pruebas.R")
test_file(path="tests/archivo_pruebas.R")
?test_file
test_file(path="tests/archivo_pruebas")
test_file(path="tests/pruebas_funcion")
library(testthat)
library(solanotlc)
library(fs)
library(here)
context("Debe estar el archivo de la licencia del paquete")
files <- dir_ls(path = here(""), glob = "*.md")
expect_true(length(files) == 1)
context("Debe haber al menos las dos funciones creadas para el paquete")
files <- dir_ls(path = here("./man"), glob = "*.Rd")
expect_true(length(files) >= 2)
test_file(path="tests/archivos_pruebas.R")
?dir_ls
here("./")
here("")
here("./man")
here("man")
context("Debe estar el archivo de la licencia del paquete")
files <- dir_ls(path = here(""), glob = "*.md")
expect_true(length(files) == 1)
context("Debe haber al menos las dos funciones creadas para el paquete")
files <- dir_ls(path = here("man"), glob = "*.Rd")
expect_true(length(files) >= 2)
test_file(path="tests/archivos_pruebas.R")
context("Debe estar el archivo de la licencia del paquete")
files <- dir_ls(path = here(""), glob = "*.md")
expect_true(length(files) == 1)
context("Debe haber al menos las dos funciones creadas para el paquete")
files <- dir_ls(path = here("man"), glob = "*.Rd")
expect_true(length(files) >= 2)
library(testthat)
library(solanotlc)
library(fs)
library(here)
context("Debe estar el archivo de la licencia del paquete")
files <- dir_ls(path = here(""), glob = "*.md")
expect_true(length(files) == 1)
context("Debe haber al menos las dos funciones creadas para el paquete")
files <- dir_ls(path = here("man"), glob = "*.Rd")
expect_true(length(files) >= 2)
test_file(path="tests/archivos_pruebas.R")
packrat::init()
library(solanotlc)
tlc?
?tlc
library(testthat)
library(here)
test_file(here("tests","archivos_pruebas.R"))
install.packages("here")
test_file(here("tests","archivos_pruebas.R"))
library(here)
test_file(here("tests","archivos_pruebas.R"))
library(testthat)
library(solanotlc)
library(fs)
library(here)
context("Debe estar el archivo de la licencia del paquete")
files <- dir_ls(path = here(""), glob = "*.md")
expect_true(length(files) == 1)
context("Debe haber al menos las dos funciones creadas para el paquete")
files <- dir_ls(path = here("man"), glob = "*.Rd")
expect_true(length(files) >= 2)
install.packages("fs")
library(testthat)
library(fs)
library(here)
context("Debe estar el archivo de la licencia del paquete")
files <- dir_ls(path = here(""), glob = "*.md")
expect_true(length(files) == 1)
context("Debe haber al menos las dos funciones creadas para el paquete")
files <- dir_ls(path = here("man"), glob = "*.Rd")
expect_true(length(files) >= 2)
test_file(here("tests","archivos_pruebas.R"))
usethis::use_package("here")
install.packages("usethis")
usethis::use_package("here")
usethis::use_package("fs")
usethis::use_package("testthat")
context("Debe estar el archivo de la licencia del paquete")
files <- dir_ls(path = here::here(""), glob = "*.md")
usethis::expect_true(length(files) == 1)
context("Debe estar el archivo de la licencia del paquete")
files <- dir_ls(path = here::here(""), glob = "*.md")
testthat::expect_true(length(files) == 1)
test_file(here("tests","archivos_pruebas.R"))
#library(usethis)
test_file(here::here("tests","archivos_pruebas.R"))
test_file(here::here("","archivos_pruebas.R"))
test_file(here::here("/solanotlc/tests/","archivos_pruebas.R"))
?path
library(fs)
dir_ls()
?dir_ls()
dir_map()
dir_ls(path = here(""))
library("fs", lib.loc="C:/Users/Deiby S/Desktop/Programacion avanzada R/Clase 3/solanotlc/packrat/lib/x86_64-w64-mingw32/3.5.1")
library(testthat)
library(here)
test_file(here::here("","archivos_pruebas.R"))
test_file(here::here("tests","archivos_pruebas.R"))
